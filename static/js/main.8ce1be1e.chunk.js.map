{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","hooks/useMinterContract.js","hooks/useContract.js","hooks/useBalance.js","components/Navbar.js","utils/minter.js","components/ui/PopUp.js","components/minter/nfts/Card.js","components/pages/Profile.js","components/Video.js","assets/production ID-4711694.mp4","components/pages/Cover.js","components/minter/nfts/Add.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","useContract","AnimeCardAbi","AnimeCardContractAddress","AnimeCard","useBalance","balance","setBalance","getBalance","getTotalBalance","value","Navbar","profile","connect","Button","status","CELO","catch","e","console","log","upload","file","Web3Storage","token","process","put","makeFileObjects","file_name","blob","Blob","JSON","stringify","type","File","trimName","name","t_name","trim","includes","replaceAll","createCardNft","minterContract","performActions","char_name","anime_name","ipfsImage","price","defaultAccount","data","image","files","file_cid","anime_price","ethers","utils","parseUnits","String","url","methods","uploadCardDetails","send","from","safeMint","transaction","uploadImage","image_name","cid","image_url","getStoredNfts","nft_arr","totalSupply","call","stored_nfts_length","i","nft","Promise","resolve","tokenURI","token_uri","fetchNftData","nft_data","ownerOf","owner","readAnimeCard","anime_card","index","sold","available","push","Number","all","ipfsUrl","axios","get","parse","removeCardNft","token_id","removeFromMarket","giftCardNft","giftAnimeCard","buyCardNft","buyAnimeCard","resellCardNft","new_price","resellAnimeCard","PopUp","data_name","show","setShow","popup_data","setPopupData","handleClose","header_name","minWidth","Modal","onHide","centered","Header","closeButton","Title","Body","Form","Control","placeholder","onChange","Footer","disabled","NftCard","change_data","buy","remove_card","formData","Col","Card","Badge","bg","src","alt","objectFit","Text","contract_address","info","card_button","Profile","show_btn","nfts","setNfts","getAnimeCards","allNfts","ownedAnimeCards","filter","error","removeAnimeCard","toast","updateAnimeCard","Row","xs","sm","lg","map","_nft","Video","autoPlay","muted","loop","Cover","AddNfts","save","setCharName","setAnimeName","setIpfsImage","setPrice","imageUrl","alert","ownerAddress","Loader","role","NftList","loading","setLoading","addAnimeCard","Add","App","profile_stat","setProfile","stats","Container","fluid","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","description","document","getElementById"],"mappings":"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","file":"static/js/main.8ce1be1e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\r\nimport Identicon from \"./ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"light\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import { useContract } from \"./useContract\";\r\nimport AnimeCardAbi from \"../contracts/AnimeCard.json\";\r\nimport AnimeCardContractAddress from \"../contracts/AnimeCard-address.json\";\r\n\r\nexport const useMinterContract = () =>\r\n  useContract(AnimeCardAbi.abi, AnimeCardContractAddress.AnimeCard);\r\n  ","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useBalance = () => {\r\n  const { address, kit } = useContractKit();\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const getBalance = useCallback(async () => {\r\n    // fetch a connected wallet token balance\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n\r\n  useEffect(() => {\r\n    if (address) getBalance();\r\n  }, [address, getBalance]);\r\n\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport Wallet from \"./Wallet\";\r\nimport { useBalance } from \"../hooks\";\r\n\r\nconst Navbar = ({profile}) => {\r\n  const { address, destroy, connect } = useContractKit();\r\n  const { balance } = useBalance();\r\n  return (\r\n    <nav className=\"d-flex justify-content-end py-3\">\r\n      <div>\r\n        {/*display user wallet*/}\r\n        {address ? (\r\n          <div className=\"nav_content\">\r\n            <Button\r\n              variant=\"outline-dark\"\r\n              className=\"px-3\"\r\n              onClick={() => {\r\n                profile({\r\n                  status: true\r\n                })\r\n              }}\r\n            >\r\n              Profile\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"outline-dark\"\r\n              className=\"px-3 mx-4\"\r\n              onClick={() => {\r\n                profile({\r\n                  status: false\r\n                })\r\n              }}\r\n            >\r\n              Marketplace\r\n            </Button>\r\n            <Wallet\r\n              address={address}\r\n              amount={balance.CELO}\r\n              symbol=\"CELO\"\r\n              destroy={destroy}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <Button\r\n            onClick={() => connect().catch((e) => console.log(e))}\r\n            variant=\"outline-dark\"\r\n            className=\"px-3\"\r\n          >\r\n            Connect Wallet\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\r\nimport axios from \"axios\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst getAccessToken = () => { return process.env.REACT_APP_STORAGE_API_KEY }\r\nconst makeStorageClient = () => { return new Web3Storage({ token: getAccessToken() }) }\r\n\r\nconst upload = (file) => {\r\n  const client = makeStorageClient();\r\n  const file_cid = client.put(file);\r\n\r\n  return file_cid;\r\n}\r\n\r\nconst makeFileObjects = (file, file_name) => {\r\n  const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" })\r\n  const files = [new File([blob], `${file_name}.json`)]\r\n\r\n  return files\r\n}\r\n\r\n// Function to trim the name of an anime card\r\n// returning a new formatted name without whitespaces\r\n// and replacing the whitespace between the name with %20\r\nconst trimName = (name) => {\r\n  let t_name = name.trim();\r\n  if(t_name.includes(\" \")) {\r\n    t_name = t_name.replaceAll(\" \", \"%20\");\r\n  }\r\n  console.log(t_name);\r\n  return t_name;\r\n}\r\n\r\nexport const createCardNft = async (\r\n  minterContract,\r\n  performActions,\r\n  { char_name, anime_name, ipfsImage, price }\r\n) => {\r\n  await performActions(async (kit) => {\r\n    if (!char_name || !anime_name || !ipfsImage || !price) return;\r\n    const { defaultAccount } = kit;\r\n    \r\n    // convert NFT metadata to JSON format\r\n    const data = JSON.stringify({\r\n      char_name,\r\n      anime_name,\r\n      image: ipfsImage\r\n    });\r\n\r\n    try {\r\n      // save NFT metadata to IPFS\r\n      const file_name = trimName(char_name);\r\n      const files = makeFileObjects(data, char_name);\r\n      const file_cid = await upload(files);\r\n\r\n      const anime_price = ethers.utils.parseUnits(String(price), \"ether\");\r\n      const url = `https://${file_cid}.ipfs.w3s.link/${file_name}.json`;\r\n\r\n      // mint the NFT and save the IPFS url to the blockchain\r\n      await minterContract.methods.uploadCardDetails(char_name, ipfsImage, anime_price).send({from: defaultAccount});\r\n      let transaction = await minterContract.methods.safeMint(defaultAccount, url).send({ from: defaultAccount });\r\n\r\n      return transaction;\r\n    } catch (error) {\r\n      console.log(\"Error: \", error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const uploadImage = async (e) => {\r\n  const image = e.target.files;\r\n  const image_name = image[0].name;\r\n\r\n  if (!image) return;\r\n  // Pack files into a CAR and send to web3.storage\r\n  const cid = await upload(image) // Promise<CIDString>\r\n  const image_url = `https://${cid}.ipfs.w3s.link/${image_name}`\r\n\r\n  return image_url;\r\n};\r\n\r\nexport const getStoredNfts = async (minterContract) => {\r\n  try {\r\n    const nft_arr = [];\r\n    const stored_nfts_length = await minterContract.methods.totalSupply().call();\r\n    for (let i = 0; i < Number(stored_nfts_length); i++) {\r\n      const nft = new Promise(async (resolve) => {\r\n        const token_uri = await minterContract.methods.tokenURI(i).call();\r\n        const nft_data = await fetchNftData(token_uri);\r\n        const owner = await minterContract.methods.ownerOf(i).call();\r\n        const anime_card = await minterContract.methods.readAnimeCard(i).call();\r\n\r\n        resolve({\r\n          index: i,\r\n          owner,\r\n          char_name: nft_data.char_name,\r\n          image: nft_data.image,\r\n          anime_name: nft_data.anime_name,\r\n          price: anime_card[4],\r\n          sold: anime_card[5],\r\n          available: anime_card[6]\r\n        });\r\n      });\r\n      nft_arr.push(nft);\r\n    }\r\n    return Promise.all(nft_arr);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\nexport const fetchNftData = async (ipfsUrl) => {\r\n  try {\r\n    if (!ipfsUrl) return null;\r\n    const nft_data = await axios.get(ipfsUrl);\r\n    const data = JSON.parse(nft_data.data)\r\n\r\n    return data;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\nexport const removeCardNft = async (minterContract, performActions, token_id) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      const { defaultAccount } = kit\r\n      await minterContract.methods\r\n      .removeFromMarket(token_id)\r\n      .send({ from: defaultAccount })\r\n    })\r\n  }\r\n  catch(error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const giftCardNft = async (minterContract, performActions, token_id, address) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      const { defaultAccount } = kit\r\n      await minterContract.methods\r\n      .giftAnimeCard(token_id, address)\r\n      .send({ from: defaultAccount });\r\n    })\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n};\r\n\r\nexport const buyCardNft = async (minterContract, performActions, token_id) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      const { defaultAccount } = kit\r\n      const anime_card = await minterContract.methods.readAnimeCard(token_id).call();\r\n      await minterContract.methods\r\n      .buyAnimeCard(token_id)\r\n      .send({ from: defaultAccount, value: anime_card[4] });\r\n    })\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n};\r\n\r\nexport const resellCardNft = async (minterContract, performActions, token_id, new_price,) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      const { defaultAccount } = kit\r\n      await minterContract.methods\r\n      .resellAnimeCard(token_id, new_price)\r\n      .send({ from: defaultAccount });\r\n    })\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n};","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\n\r\nconst PopUp = ({ data, data_name }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [popup_data, setPopupData] = useState(\"\");\r\n\r\n  // check if all form popup_data has been filled\r\n  const isFormFilled = () => popup_data\r\n  \r\n  // close the popup modal\r\n  const handleClose = () => setShow(false);;\r\n    // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  const header_name = () => {\r\n    if (data_name.includes(\"Resell\")) return \"Resell\";\r\n    else if(data_name.includes(\"Gift\")) return \"Gift\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"outline-dark\"\r\n        style={{ minWidth: \"70px\"}}\r\n      >\r\n        {data_name}\r\n      </Button>\r\n\r\n        {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{header_name()} Anime Card</Modal.Title>\r\n        </Modal.Header>\r\n  \r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder={header_name()}\r\n              style={{ height: \"45px\" }}\r\n              onChange={(e) => {\r\n                setPopupData(e.target.value);\r\n              }}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n  \r\n        <Modal.Footer>\r\n          <Button variant=\"outline-dark\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              const data_name = header_name()\r\n              data({\r\n                popup_data,\r\n                data_name\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            {header_name()} NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nPopUp.propTypes = {\r\n  data: PropTypes.func.isRequired,\r\n  data_name: PropTypes.string.isRequired,\r\n};\r\n  \r\nexport default PopUp;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Button } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\nimport PopUp from \"../../ui/PopUp\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nconst NftCard = ({ nft, change_data, buy, remove_card }) => {\r\n  const { char_name, anime_name, image, owner, index, price, sold, available } = nft;\r\n  const { kit } = useContractKit();\r\n  const { defaultAccount } = kit;\r\n\r\n  // Card button function to display a particular button depending on the\r\n  // the owner of the Nft and the contract being displayed\r\n  function card_button(owner, contract_address, sold, available, index) {\r\n    if(owner === contract_address) {\r\n      if(available) { return <> <PopUp data={(info) => {change_data({...info, index})}} data_name={\"Gift Anime\"} /> <Button onClick={()=>{remove_card({index})}} variant=\"outline-dark\">Remove</Button> </> }\r\n      else if (!available) {\r\n        return <div className=\"d-flex justify-content-center gap-3\"><PopUp data={nft_data} data_name={\"Gift Anime\"} /><PopUp data={nft_data} data_name=\"Resell Anime\" /></div>\r\n      }\r\n    }\r\n    else if (owner !== contract_address) {\r\n      if(sold) { return <Button disabled variant=\"danger\" style={{ minWidth: \"70px\"}}>Sold</Button> }\r\n      else if(!available) { return <Button disabled variant=\"danger\" style={{ minWidth: \"70px\"}}>Removed</Button> }\r\n      else if(!sold && available) { return <Button variant=\"dark\" style={{ minWidth: \"70px\"}} onClick={()=> {buy({index})}}>Buy</Button> }\r\n    }\r\n  }\r\n  \r\n  // nft_data gotten from the pop up component\r\n  // data will be passed to the index.js component for use\r\n  async function nft_data(formData) {\r\n    change_data({\r\n      ...formData,\r\n      index\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <Col key={index}>\r\n      <Card className=\"position-relative\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={28} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {index} ID\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\"card_image ratio ratio-4x3\" style={{position: \"relative\"}}>\r\n          <img src={image} alt={anime_name} style={{objectFit:\"cover\"}} />\r\n          <div className=\"price_tag\">\r\n            <p>{price / 10**18}cUSD</p>\r\n          </div>\r\n        </div>\r\n\r\n        <Card.Body className=\"card_body d-flex flex-column text-center\">\r\n          <Card.Title className=\"fs-3 d-flex justify-content-evenly align-items-center text-capitalize\">{char_name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1 text-capitalize\">{anime_name}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer className=\"d-flex justify-content-center gap-3\">\r\n          { card_button(owner, defaultAccount, sold, available, index) }\r\n        </Card.Footer>\r\n      </Card>\r\n    </Col>\r\n    </>\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default NftCard;","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { getStoredNfts, buyCardNft, removeCardNft, resellCardNft, giftCardNft } from \"../../utils/minter\";\r\nimport { truncateAddress } from \"../../utils\";\r\nimport Identicon from \"../ui/Identicon\";\r\nimport Nft from \"../minter/nfts/Card\";\r\nimport { useMinterContract } from \"../../hooks\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { NotificationSuccess } from \"../ui/Notifications\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport default function Profile ({ show_btn }) {\r\n    // initialize the NFT mint contract\r\n  const minterContract = useMinterContract();\r\n  const { kit, performActions } = useContractKit();\r\n  const { defaultAccount } = kit;\r\n  const [nfts, setNfts] = useState([]);\r\n  \r\n  const getAnimeCards = useCallback(async () => {\r\n    try {\r\n      // fetch all nfts from the smart contract\r\n      const allNfts = await getStoredNfts(minterContract);\r\n      \r\n      // filter through the nfts to get the nfts owned by the current user\r\n      const ownedAnimeCards = allNfts.filter((nft) => {\r\n        return nft.owner === defaultAccount\r\n      })\r\n\r\n      if (!ownedAnimeCards) return;\r\n      setNfts(ownedAnimeCards);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, defaultAccount]);\r\n\r\n  const removeAnimeCard = async (data) => {\r\n    try {\r\n      const { index } = data;\r\n      await removeCardNft(minterContract, performActions, index);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n\r\n      getAnimeCards();\r\n    } catch(error) {\r\n      console.log(error);\r\n      toast(<NotificationSuccess text=\"Failed to remove anime card from the market\" />);\r\n    }\r\n  }\r\n\r\n  // function to change the data of the nft stored\r\n  // only the owner of the nft and the price can be changed\r\n  // uses the data gotten from the Card.js component\r\n  const updateAnimeCard = async(info) => {\r\n    const {popup_data, data_name, index} = info;\r\n\r\n    if(data_name.includes(\"Gift\")) {\r\n      try {\r\n        await giftCardNft(minterContract, performActions, index, popup_data);\r\n        getAnimeCards();\r\n      } catch(error) { console.log(error) }\r\n    }\r\n    \r\n    else if(data_name.includes(\"Resell\")) {\r\n      try {\r\n        const price = ethers.utils.parseUnits(String(popup_data), \"ether\");\r\n        await resellCardNft(minterContract, performActions, index, price)\r\n        getAnimeCards();\r\n      } catch(error) { console.log(error) }\r\n    }\r\n  }\r\n\r\n  // funtion to buy nft\r\n  // uses the token id(index) of the nft\r\n  // to call the buyCardNft function imported\r\n  // from the minter.js file\r\n  const buyAnimeCard = async(token_id) => {\r\n    const { index } = token_id\r\n    await buyCardNft(minterContract, performActions, index)\r\n\r\n    getAnimeCards();\r\n  }\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (defaultAccount && minterContract) {\r\n        getAnimeCards();\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, defaultAccount, getAnimeCards]);\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"profile\">\r\n        <div className=\"profile_header d-flex g-10 justify-content-center align-items-center mb-5\">\r\n          <Identicon address={defaultAccount} size={120} className=\"mb-2\"/>\r\n          <h3>{truncateAddress(defaultAccount)}</h3>\r\n        </div>\r\n\r\n        <div className=\"profile_details\">\r\n          <h3>Owned NFTs</h3>\r\n\r\n          <Row xs={1} sm={2} lg={3} className=\"g-3 my-5 g-xl-4 g-xxl-5\">\r\n              {nfts.map((_nft) => (\r\n                <Nft\r\n                  key={_nft.index}\r\n                  nft={{\r\n                    ..._nft,\r\n                  }}\r\n                  change_data={ updateAnimeCard }\r\n                  buy={ buyAnimeCard }\r\n                  remove_card={ removeAnimeCard }\r\n                />\r\n              ))}\r\n            </Row>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from \"react\";\r\n\r\nconst Video = ({ src }) => {\r\n  return (\r\n    <>\r\n      <video style={{objectFit:\"cover\"}} autoPlay muted loop>\r\n        <source src={src} />\r\n      </video>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","export default __webpack_public_path__ + \"static/media/production ID-4711694.705b5427.mp4\";","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport Video from \"../Video\"\r\nimport src from \"../../assets/production ID-4711694.mp4\"\r\n\r\nconst Cover = ({ name, connect }) => {\r\n  if (name) {\r\n    return (\r\n      <div className=\"bg_image\">\r\n        <Video src={src} />\r\n        <div\r\n          className=\"bg_text text-light position-absolute start-0 top-0 h-100 d-flex justify-content-center align-items-center\"\r\n        >\r\n          <div className=\"px-5 text-start\">\r\n            <h1>Welcome to My Anime World</h1>\r\n            <p>\r\n              Anime NFT taken to a different level, with awesome NFTs\r\n              available for sale, easy minting of NFTs and other amazing\r\n              features to explore. Connect your wallet below to begin your\r\n              journey into the world of anime NFTs\r\n            </p>\r\n            <Button\r\n              onClick={() => connect().catch((e) => console.log(e))}\r\n              variant=\"outline-light\"\r\n              className=\"px-3 mt-4\"\r\n            >\r\n              Connect Wallet\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n};\r\n\r\nexport default Cover;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { uploadImage } from \"../../../utils/minter\";\r\n\r\nconst AddNfts = ({ save, address }) => {\r\n  // State Variables\r\n  const [char_name, setCharName] = useState(\"\");\r\n  const [anime_name, setAnimeName] = useState(\"\");\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  \r\n  // close the popup modal\r\n  const handleClose = () => setShow(false);\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n  // check if all form data has been filled\r\n  const isFormFilled = () => char_name && anime_name && ipfsImage && price;\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-0\"\r\n        style={{ width: \"38px\" }}\r\n      >\r\n        <i className=\"bi bi-plus\"></i>\r\n      </Button>\r\n\r\n        {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create Anime NFT Gift Card</Modal.Title>\r\n        </Modal.Header>\r\n  \r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Control\r\n              type=\"text\"\r\n              className=\"mb-3\"\r\n              placeholder=\"Character Name\"\r\n              style={{ height: \"45px\" }}\r\n              onChange={(e) => {\r\n                setCharName(e.target.value);\r\n              }}\r\n            />\r\n            \r\n            <Form.Control\r\n              type=\"text\"\r\n              className=\"mb-3\"\r\n              placeholder=\"Anime Name\"\r\n              style={{ height: \"45px\" }}\r\n              onChange={(e) => {\r\n                setAnimeName(e.target.value);\r\n              }}\r\n            />\r\n  \r\n            <Form.Control\r\n              type=\"number\"\r\n              placeholder=\"Price\"\r\n              style={{ height: \"45px\" }}\r\n              onChange={(e) => {\r\n                setPrice(e.target.value);\r\n              }}\r\n            />\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className=\"my-3\"\r\n              placeholder=\"Upload Image\"\r\n              onChange={async (e) => {\r\n                console.log(e)\r\n                const imageUrl = await uploadImage(e);\r\n                console.log(`Image URL: ${imageUrl}`)\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n            />\r\n          </Form>\r\n        </Modal.Body>\r\n  \r\n        <Modal.Footer>\r\n          <Button variant=\"outline-dark\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                char_name,\r\n                anime_name,\r\n                ipfsImage,\r\n                ownerAddress: address,\r\n                price\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nAddNfts.propTypes = {\r\n  save: PropTypes.func.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n  \r\nexport default AddNfts;","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport Nft from \"./Card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { ethers } from \"ethers\";\r\nimport {\r\n  getStoredNfts,\r\n  createCardNft,\r\n  removeCardNft,\r\n  giftCardNft,\r\n  buyCardNft,\r\n  resellCardNft\r\n} from \"../../../utils/minter\";\r\n\r\nconst NftList = ({ minterContract, name }) => {\r\n  const { performActions, address } = useContractKit();\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getAnimeCards = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const allNfts = await getStoredNfts(minterContract);\r\n      if (!allNfts) return;\r\n      setNfts(allNfts);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [minterContract]);\r\n\r\n  // function to add new nft to the nft lists\r\n  // uses the data received from the Add.js component\r\n  // \r\n  const addAnimeCard = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n      await createCardNft(minterContract, performActions, data);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n\r\n      getAnimeCards();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const removeAnimeCard = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n      const { index } = data;\r\n      await removeCardNft(minterContract, performActions, index);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n\r\n      getAnimeCards();\r\n    } catch(error) {\r\n      console.log(error);\r\n      toast(<NotificationSuccess text=\"Failed to remove anime card from the market\" />);\r\n    }\r\n  }\r\n\r\n  // function to change the data of the nft stored\r\n  // only the owner of the nft and the price can be changed\r\n  // uses the data gotten from the Card.js component\r\n  const updateAnimeCard = async(info) => {\r\n    const {popup_data, data_name, index} = info;\r\n\r\n    if(data_name.includes(\"Gift\")) {\r\n      try {\r\n        await giftCardNft(minterContract, performActions, index, popup_data);\r\n        getAnimeCards();\r\n      } catch(error) { console.log(error) }\r\n    }\r\n    \r\n    else if(data_name.includes(\"Resell\")) {\r\n      try {\r\n        const price = ethers.utils.parseUnits(String(popup_data), \"ether\");\r\n        await resellCardNft(minterContract, performActions, index, price)\r\n        getAnimeCards();\r\n      } catch(error) { console.log(error) }\r\n    }\r\n  }\r\n\r\n  // funtion to buy nft\r\n  // uses the token id(index) of the nft\r\n  // to call the buyCardNft function imported\r\n  // from the minter.js file\r\n  const buyAnimeCard = async(token_id) => {\r\n    const { index } = token_id\r\n    await buyCardNft(minterContract, performActions, index)\r\n\r\n    getAnimeCards();\r\n  }\r\n  \r\n  useEffect(() => {\r\n    try {\r\n      if (address && minterContract) {\r\n        getAnimeCards();\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, address, getAnimeCards]);\r\n\r\n  if (address) {\r\n    return (\r\n      <>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <h1 className=\"fs-4 fw-bold mb-0\">{ name }</h1>\r\n              {address ? (\r\n                <AddNfts save={ addAnimeCard } address={ address } />\r\n              ) : null}\r\n            </div>\r\n            {nfts.length > 0 ? (\r\n              <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n                {nfts.map((_nft) => (\r\n                  <Nft\r\n                    key={_nft.index}\r\n                    nft={{\r\n                      ..._nft,\r\n                    }}\r\n                    change_data={ updateAnimeCard }\r\n                    buy={ buyAnimeCard }\r\n                    remove_card={ removeAnimeCard }\r\n                  />\r\n                  ))}\r\n                </Row>\r\n              ) : (\r\n                <p className=\"text-center my-5 fs-2\">No uploaded anime card available</p>\r\n              )}\r\n          </>\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nNftList.propTypes = {\r\n  minterContract: PropTypes.instanceOf(Object),\r\n  updateBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nNftList.defaultProps = {\r\n  minterContract: null,\r\n};\r\n\r\nexport default NftList;","import React, { useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { Notification } from \"./components/ui/Notifications\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Profile from \"./components/pages/Profile\";\r\nimport Cover from \"./components/pages/Cover\";\r\nimport Nfts from \"./components/minter/nfts\";\r\nimport { useBalance, useMinterContract } from \"./hooks\";\r\nimport \"./App.css\";\r\n\r\nconst App = function AppWrapper() {\r\n  const { address, connect } = useContractKit();\r\n  const [ profile_stat, setProfile ] = useState(false);\r\n  const { getBalance } = useBalance();\r\n  const minterContract = useMinterContract();\r\n  const name = \"Anime Cards Marketplace\";\r\n\r\n  const profile = (stats) => {\r\n    const { status } = stats\r\n    setProfile(status)\r\n  };\r\n  return (\r\n    <>\r\n      <Notification />\r\n      {address ? (\r\n        <>      \r\n        <Navbar profile={profile}/>\r\n        <Container className=\"nft_marketplace\" fluid=\"md\">\r\n          <main>\r\n            { profile_stat ? (\r\n              <Profile />\r\n            ) : (\r\n              <Nfts\r\n              name={name}\r\n              updateBalance={getBalance}\r\n              minterContract={minterContract}\r\n            />\r\n            )}\r\n          </main>\r\n        </Container>\r\n        </>\r\n      ) : (\r\n        <Cover name={name} connect={connect} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Anime Cards\",\r\n        description: \"A Marketplace for anime cards\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}